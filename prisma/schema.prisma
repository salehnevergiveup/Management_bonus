generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model UserInvitation {
  id          String    @id @default(uuid())
  token       String    @unique
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  expires_at  DateTime
  accepted_at DateTime?

  @@index([user_id])
}


model UserProcess {
  id          String         @id
  user_id     String
  user      User?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status      String
  progress    Float          @default(0)
  start_time  DateTime       @default(now())
  end_time    DateTime?
  result      Json?          @default("{}")
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  
  // Relation to ProcessToken
  tokens      ProcessToken[]

  @@index([user_id])
  @@index([status])
}

model ProcessToken {
  token       String      @id
  process_id  String
  user_id     String
  expires     DateTime
  isComplete  Boolean     @default(false)
  created_at  DateTime    @default(now())
  
  // Relation to UserProcess
  process     UserProcess @relation(fields: [process_id], references: [id])

  @@index([process_id])
  @@index([user_id])
}

model Notification {
  id        String   @id @default(uuid())
  user_id   String?  
  user      User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  message   String
  status    String   @default("unread") 
  type      String   @default("info")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          String     @id @default(uuid())
  name        String
  username    String     @unique
  email       String     @unique
  password    String
  phone       String?    @unique
  profile_img String?    @db.LongText
  status      String?    @default("inactive")
  updated_at  DateTime   @updatedAt
  role_id     String
  role        Role       @relation(fields: [role_id], references: [id])
  invitations UserInvitation[]
  notifications Notification[]
  userProcess   UserProcess[]

}

model Role {  
  id          String           @id @default(uuid())  
  name        String           @unique  
  users       User[]  
  permissions RolePermission[] 
}

model Permission {  
  id   String           @id @default(uuid())  
  name String           @unique  
  roles RolePermission[] 
}

model RolePermission {
  role_id       String
  permission_id String
  role          Role        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}