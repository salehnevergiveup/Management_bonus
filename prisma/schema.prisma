generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model UserInvitation {
  id          String    @id @default(uuid())
  token       String    @unique
  user_id     String
  user        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at  DateTime  @default(now())
  expires_at  DateTime
  accepted_at DateTime?

  @@index([user_id])
}


model UserProcess {
  id          String         @id
  user_id     String
  user        User?          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  status      String
  progress    Float          @default(0)
  start_time  DateTime       @default(now())
  end_time    DateTime?
  result      Json?          @default("{}")
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  
  tokens      ProcessToken[]
  matches     Match[]

  @@index([user_id])
  @@index([status])
}

model ProcessToken {
  token       String      @id
  process_id  String
  user_id     String
  expires     DateTime
  isComplete  Boolean     @default(false)
  created_at  DateTime    @default(now())
  
  // Relation to UserProcess
  process     UserProcess @relation(fields: [process_id], references: [id])

  @@index([process_id])
  @@index([user_id])
}

model Notification {
  id        String   @id @default(uuid())
  user_id   String?  
  user      User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
  message   String
  status    String   @default("unread") 
  type      String   @default("info")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id               String           @id @default(uuid())
  name             String
  username         String           @unique
  email            String           @unique
  password         String
  phone            String?          @unique
  profile_img      String?          @db.LongText
  status           String?          @default("inactive")
  updated_at       DateTime         @updatedAt
  role_id          String
  role             Role             @relation(fields: [role_id], references: [id])
  invitations      UserInvitation[]
  notifications    Notification[]
  user_processes   UserProcess[]
  sender_requests  Request[]        @relation("RequestSender")
  admin_requests   Request[]        @relation("RequestAdmin")
}

model Role {  
  id          String           @id @default(uuid())  
  name        String           @unique  
  users       User[]  
  permissions RolePermission[] 
}

model Permission {  
  id    String           @id @default(uuid())  
  name  String           @unique  
  roles RolePermission[] 
}

model RolePermission {
  role_id       String
  permission_id String
  role          Role        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}



model TransferAccount {
  id              String    @id @default(uuid())
  account_username String    @unique
  password        String
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  players         Player[]
}

model Player {
  id                  String           @id @default(uuid())
  account_username    String
  transfer_account_id String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt

  transfer_account    TransferAccount  @relation(fields: [transfer_account_id], references: [id], onDelete: Cascade)
  

  matches             Match[]

  @@index([transfer_account_id])
}

model Match {
  id          String      @id @default(uuid())
  username    String
  player_id   String?
  process_id  String
  status      String      @default("pending") // "pending", "failed", "finished"
  amount      Float
  currency    String      // "USD" or "MYR"
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  

  player      Player?     @relation(fields: [player_id], references: [id], onDelete: SetNull)
  process     UserProcess @relation(fields: [process_id], references: [id], onDelete: Cascade)

  @@index([player_id])
  @@index([process_id])
}

model Request {
  id              String    @id @default(uuid())
  sender_id       String
  status          String    @default("pending") // "pending", "approved", "rejected"
  message         String    @db.Text
  marked_admin_id String?
  model_name      String    // Polymorphic relationship - name of the model
  model_id        String    // Polymorphic relationship - ID of the record
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  
  // Relations
  sender          User      @relation("RequestSender", fields: [sender_id], references: [id], onDelete: Cascade)
  admin           User?     @relation("RequestAdmin", fields: [marked_admin_id], references: [id], onDelete: SetNull)

  @@index([sender_id])
  @@index([marked_admin_id])
  @@index([model_name, model_id]) // Index for the polymorphic lookup
}